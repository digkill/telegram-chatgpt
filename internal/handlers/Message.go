package handlers

import (
	"encoding/base64"
	"fmt"
	"github.com/digkill/telegram-chatgpt/internal/models"
	"github.com/digkill/telegram-chatgpt/internal/services/chatgpt"
	"github.com/gin-gonic/gin"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/sashabaranov/go-openai"
	"github.com/sirupsen/logrus"
	"io"
	"log"
	"mime"
	"net/http"
	"os"
)

type MessageContext struct {
	Updater *UpdateTelegramData
	Payload string
}

type MessageHandler interface {
	Handle(message *tgbotapi.Message, ctx *MessageContext)
}

type InitHandler struct {
	Next MessageHandler
}

func (i *InitHandler) Handle(message *tgbotapi.Message, ctx *MessageContext) {
	if message.IsCommand() && message.Command() == "start" {
		err := ctx.Updater.SendMessageTelegram(
			message.Chat.ID,
			"–ó–¥–∞—Ä–æ–≤–∞, "+message.Chat.UserName+" –≥–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! üòé\n\n–Ø –ê—Ä—Ö–∏–º–µ–¥ GPT, —Ç–≤–æ–π –±—Ä–æ –≤ –º–∏—Ä–µ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏! üöÄ\n\nüìå –ß—Ç–æ —É–º–µ—é?\n‚úÖ –†–µ—à–∞—é –ª—é–±—ã–µ –∑–∞–¥–∞—á–∏ ‚Äì –∞–ª–≥–µ–±—Ä–∞, –≥–µ–æ–º–µ—Ç—Ä–∏—è, —É—Ä–∞–≤–Ω–µ–Ω–∏—è, –¥—Ä–æ–±–∏, –≤—Å—ë, —á—Ç–æ –¥—É—à–∞ –ø–æ–∂–µ–ª–∞–µ—Ç.\n‚úÖ –§–æ—Ç–∫–∞–π –∑–∞–¥–∞–Ω–∏–µ ‚Äì —Ä–∞–∑–±–µ—Ä—É—Å—å –∏ –æ–±—ä—è—Å–Ω—é!\n‚úÖ –ü–æ–º–æ–≥—É –Ω–µ —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–∞—Ç—å, –Ω–æ –∏ —Ä–µ–∞–ª—å–Ω–æ –ø–æ–Ω—è—Ç—å, —á—Ç–æ–±—ã –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç—ã –±—ã–ª –∫–æ—Ä–æ–ª—ë–º! üëë\n‚úÖ –†–∞–∑–∂—É—é –¥–∞–∂–µ —Å–∞–º—É—é –∂—ë—Å—Ç–∫—É—é —Ç–µ–º—É, –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ –º–µ–º—á–∏–∫ —Å –∫–æ—Ç–∏–∫–∞–º–∏.\n\nüí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∫–∏–Ω—å —Ñ–æ—Ç–∫—É –ø—Ä–∏–º–µ—Ä–∞ ‚Äì –∏ —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –Ω–∞ –∏–∑–∏! üòè")

		if err != nil {
			logrus.Errorf("Cannot send message. Error: " + err.Error())
		}
	}
	i.Next.Handle(message, ctx)
}

type CommandMenuHandler struct {
	Next MessageHandler
}

func (h *CommandMenuHandler) Handle(message *tgbotapi.Message, ctx *MessageContext) {
	if message.Command() == "start" {

		/*ctx.Updater.Handler.SendListMenu(
			message.Chat.ID,
			"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É",
			models.Button{
				Type: "show_main_menu",
			},
		)
		*/

		return
	} else {

		err := ctx.Updater.SendMessageTelegram(
			message.Chat.ID,
			"–†–µ—à–∞—é –∑–∞–¥–∞—á—É ü§ì...",
		)
		if err != nil {
			return
		}

		var openAIToken = os.Getenv("CHATGPT_TOKEN")
		var openAIURL = os.Getenv("CHATGPT_URL")

		config := openai.DefaultConfig(openAIToken)
		if openAIURL != "" {
			config.BaseURL = openAIURL
		}

		openaiClient := openai.NewClientWithConfig(config)
		chat := chatgpt.NewChatGPT(openaiClient)

		images := message.Photo

		if images != nil && len(*images) > 0 {
			photoId := (*images)[0].FileID

			fileId := tgbotapi.FileConfig{FileID: photoId}

			file, err := ctx.Updater.GetBot().GetFile(fileId)
			if err != nil {
				return
			}

			urlImage := file.Link(ctx.Updater.GetBot().Token)

			image, err := downloadFile(urlImage)
			if err != nil {
				log.Fatal(err)
			}

			//	ctxs := context.Background()

			//	bytes, err := openaiClient.CreateFileBytes(ctxs, openai.FileBytesRequest{
			//		Name:    "–ü—Ä–∏–º–µ—Ä",
			//		Bytes:   []byte(image),
			//		Purpose: openai.PurposeFineTune,
			//	})

			if err != nil {
				return
			}

			fmt.Println("ü§ìü§ìü§ìü§ìü§ì")
			//	fmt.Println(bytes)
			fmt.Println("ü§ìü§ìü§ìü§ìü§ì")

			//chat.GetChat().CreateFile()

			// ChatMessageImageURL

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è JSON

			imgUrl := openai.ChatMessageImageURL{
				URL: image,
			}

			contentImg := openai.ChatMessagePart{
				ImageURL: &imgUrl,
				Type:     openai.ChatMessagePartTypeImageURL,
			}

			contentText := openai.ChatMessagePart{
				Text:     "–†–µ—à–∏ –∑–∞–¥–∞—á—É –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç HTML –¥–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ —Ç–µ–≥–∏ <b>, <i>, <u>, <s>, <span>, <a>, <pre>, <code>, <blockquote>, –¥—Ä—É–≥–∏–µ HTML –¢–µ–≥–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ, –ø—Ä–∏–≤–µ–¥–∏ —Ñ–æ—Ä–º—É–ª—ã –≤ —É–¥–æ–±–Ω–æ–º –≤–∏–¥–µ —Å LaTeX, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ —Ö–æ—Ä–æ—à–æ —á–∏—Ç–∞–µ–º—ã–º–∏,",
				ImageURL: &imgUrl,
				Type:     openai.ChatMessagePartTypeText,
			}

			// –°–æ–∑–¥–∞—ë–º JSON-–æ–±—ä–µ–∫—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
			data := []openai.ChatCompletionMessage{
				{
					Role:         "user",
					MultiContent: []openai.ChatMessagePart{contentImg, contentText},
				},
			}

			//jsonData, err := json.Marshal(data)

			//	fmt.Println(string(jsonData))

			if err != nil {
				fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ JSON:", err)
				return
			}

			var contextGpt *gin.Context
			contextGpt = &gin.Context{}

			answer, err := chat.Chat(contextGpt, data)

			if err != nil {
				logrus.Error(err)
			}

			ctx.Updater.Handler.SendResult(
				message.Chat.ID,
				answer.Content,
				models.Button{
					Type: "show_main_menu",
				},
			)
			return

		} else {
			fmt.Println("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
		}

		//	actionInfo := domains.ActionInfo{
		//		Message: &domains.Message{Role: "User", Content: mm},
		//	}

		// msg := actionInfo.GetText()
		//	messages := domains.MakeMessages(msg)

	}

	h.Next.Handle(message, ctx)
}

type FinishHandler struct{}

func (h *FinishHandler) Handle(message *tgbotapi.Message, ctx *MessageContext) {
	/*
		err := ctx.Updater.SendMessageTelegram(message.Chat.ID,
			"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã!")
		if err != nil {
			logrus.Errorf("Cannot send message. Error: " + err.Error())
		}

	*/
}

func downloadFile(url string) (string, error) {
	//Get the response bytes from the url
	response, err := http.Get(url)
	if err != nil {
		return "", err
	}
	defer response.Body.Close()

	bodyBytes, err := io.ReadAll(response.Body)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è:", err)
		return "", err
	}

	// –ö–æ–¥–∏—Ä—É–µ–º –≤ Base64
	base64String, _ := EncodeImageToBase64(bodyBytes)

	//bodyBytes = []byte(strings.ToValidUTF8(string(bodyBytes), ""))
	//fmt.Println("!!!!")
	//fmt.Println(string(bodyBytes))
	//if response.StatusCode != 200 {
	//	return errors.New("Received non 200 response code")
	//	}
	//Create a empty file

	//Write the bytes to the fiel
	//_, err = io.Copy(file, response.Body)

	// –ü–∞—Ä—Å–∏–º JSON –∫–∞–∫ –º–∞—Å—Å–∏–≤
	// var records []map[string]interface{}
	//	if err := json.Unmarshal(bodyBytes, &records); err != nil {
	//	//	fmt.Println("–û—à–∏–±–∫–∞ JSON:", err)
	//	}

	//	var jsonlData string

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç
	//	for _, record := range records {
	//	line, _ := json.Marshal(record) // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON —Å—Ç—Ä–æ–∫—É
	//		jsonlData += string(line) + "\n"
	//}

	//fmt.Println("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ .jsonl!")
	//	fmt.Println(jsonlData)

	return base64String, nil
}

func EncodeImageToBase64(imageBytes []byte) (string, error) {

	// –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
	base64Str := base64.StdEncoding.EncodeToString(imageBytes)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
	//ext := filepath.Ext(filePath)
	mimeType := mime.TypeByExtension(".jpg")
	if mimeType == "" {
		mimeType = "application/octet-stream" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º data URL
	dataURL := fmt.Sprintf("data:%s;base64,%s", mimeType, base64Str)

	return dataURL, nil
}
